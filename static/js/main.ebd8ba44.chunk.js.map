{"version":3,"sources":["components/keypad/Keypad.js","components/screen/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Keypad","scrVal","setScrVal","clearScr","printVal","e","target","name","getOutput","eval","toString","changeSign","replace","className","onClick","Screen","type","placeholder","value","onChange","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4JAAA,qVAGMA,OAAS,SAATA,OAAU,MAA2B,IAAzBC,OAAwB,KAAxBA,OAAQC,UAAgB,KAAhBA,UAGhBC,SAAW,WACbD,UAAU,KAIRE,SAAW,SAACC,GACdH,UAAUD,OAASI,EAAEC,OAAOC,OAI1BC,UAAY,SAAZA,YACFN,UAAUO,KAAKR,QAAQS,aAIrBC,WAAa,WACfT,WAAU,SAACD,GACP,OAAGA,GAAQ,EACS,IAAMA,EAEfA,EAAOW,QAAQ,IAAK,SAKvC,OACI,kEAAKC,UAAU,YACX,qEAAQC,QAASX,UAAjB,MACA,qEAAQW,QAASH,YAAjB,OACA,qEAAQG,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,IAAIM,UAAU,gBAA9C,KACA,qEAAQC,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,IAAIM,UAAU,sBAA9C,KACA,qEAAQC,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,IAAIM,UAAU,oBAA9C,KACA,qEAAQC,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASV,SAAUG,KAAK,IAAIM,UAAU,gBAA9C,KACA,qEAAQC,QAASV,SAAUG,KAAK,IAAIM,UAAU,uBAA9C,KACA,qEAAQC,QAASV,SAAUG,KAAK,KAAhC,KACA,qEAAQO,QAASN,UAAWK,UAAU,cAAtC,OAKGb,8B,sMClCAe,G,YAnBA,SAAC,GAA2B,IAAzBd,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAMtB,OACI,yBAAKW,UAAU,OACX,2BACIA,UAAU,iBACVG,KAAK,OACLC,YAAY,IACZC,MAAOjB,EACPkB,SAXW,SAACd,GACpBH,EAAUG,EAAEC,OAAOY,a,aCaZE,MAZf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENpB,EAFM,KAEEC,EAFF,KAIb,OACE,yBAAKW,UAAU,YACb,kBAAC,EAAD,CAAQZ,OAAQA,EAAQC,UAAWA,IACnC,kBAACF,EAAA,EAAD,CAAQC,OAAQA,EAAQC,UAAWA,MCFrBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebd8ba44.chunk.js","sourcesContent":["import React from 'react';\r\nimport './keypad.css';\r\n\r\nconst Keypad = ({ scrVal, setScrVal }) => {\r\n    \r\n    // function for clearing screen\r\n    const clearScr = () => {\r\n        setScrVal('');\r\n    }\r\n    \r\n    // onclick for digits and arithmatic symbols\r\n    const printVal = (e) => {\r\n        setScrVal(scrVal + e.target.name);\r\n    }\r\n\r\n    // for getting output after pressing '=' key\r\n    const getOutput = () => {\r\n        setScrVal(eval(scrVal).toString());\r\n    }\r\n\r\n    // for changing sign\r\n    const changeSign = () => {\r\n        setScrVal((scrVal) => {\r\n            if(scrVal >! 0) {\r\n                return scrVal = \"-\" + scrVal;\r\n            } else {\r\n                return scrVal.replace(\"-\", \"+\");\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"cal-keys\">\r\n            <button onClick={clearScr}>AC</button>\r\n            <button onClick={changeSign}>+/-</button>\r\n            <button onClick={printVal} name=\"%\">%</button>\r\n            <button onClick={printVal} name=\"/\" className=\"division-key\">/</button>\r\n            <button onClick={printVal} name=\"7\">7</button>\r\n            <button onClick={printVal} name=\"8\">8</button>\r\n            <button onClick={printVal} name=\"9\">9</button>\r\n            <button onClick={printVal} name=\"*\" className=\"multiplication-key\">x</button>\r\n            <button onClick={printVal} name=\"4\">4</button>\r\n            <button onClick={printVal} name=\"5\">5</button>\r\n            <button onClick={printVal} name=\"6\">6</button>\r\n            <button onClick={printVal} name=\"-\" className=\"substraction-key\">-</button>\r\n            <button onClick={printVal} name=\"1\">1</button>\r\n            <button onClick={printVal} name=\"2\">2</button>\r\n            <button onClick={printVal} name=\"3\">3</button>\r\n            <button onClick={printVal} name=\"+\" className=\"addition-key\">+</button>\r\n            <button onClick={printVal} name=\"0\" className=\"zero-key expand-box\">0</button>\r\n            <button onClick={printVal} name=\".\">.</button>\r\n            <button onClick={getOutput} className=\"equals-key\">=</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keypad;\r\n","import React from 'react'\r\nimport './screen.css';\r\n\r\nconst Screen = ({ scrVal, setScrVal }) => {\r\n    \r\n    const changeScrValue = (e) => {\r\n        setScrVal(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-2\">\r\n            <input \r\n                className=\"p-2 cal-screen\" \r\n                type=\"text\"\r\n                placeholder=\"0\" \r\n                value={scrVal}\r\n                onChange={changeScrValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Screen from './components/screen/Screen';\nimport Keypad from './components/keypad/Keypad';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n  const [scrVal, setScrVal] = useState('');\n\n  return (\n    <div className=\"main-app\">\n      <Screen scrVal={scrVal} setScrVal={setScrVal} />\n      <Keypad scrVal={scrVal} setScrVal={setScrVal}/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}